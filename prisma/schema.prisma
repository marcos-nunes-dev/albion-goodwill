generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DailyActivity {
  id                      Int       @id @default(autoincrement())
  userId                  String
  guildId                 String
  date                    DateTime  @db.Date
  voiceTimeSeconds        Int       @default(0)
  messageCount            Int       @default(0)
  afkTimeSeconds          Int       @default(0)
  mutedDeafenedTimeSeconds Int      @default(0)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  guild                  GuildSettings @relation(fields: [guildId], references: [guildId])

  @@unique([userId, guildId, date])
  @@index([date])
  @@index([guildId, date])
}

model WeeklyActivity {
  id                      Int       @id @default(autoincrement())
  userId                  String
  guildId                 String
  weekStart               DateTime  @db.Date
  voiceTimeSeconds        Int       @default(0)
  messageCount            Int       @default(0)
  afkTimeSeconds          Int       @default(0)
  mutedDeafenedTimeSeconds Int      @default(0)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  guild                  GuildSettings @relation(fields: [guildId], references: [guildId])

  @@unique([userId, guildId, weekStart])
  @@index([weekStart])
  @@index([guildId, weekStart])
}

model MonthlyActivity {
  id                      Int       @id @default(autoincrement())
  userId                  String
  guildId                 String
  monthStart              DateTime  @db.Date
  voiceTimeSeconds        Int       @default(0)
  messageCount            Int       @default(0)
  afkTimeSeconds          Int       @default(0)
  mutedDeafenedTimeSeconds Int      @default(0)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  guild                  GuildSettings @relation(fields: [guildId], references: [guildId])

  @@unique([userId, guildId, monthStart])
  @@index([monthStart])
  @@index([guildId, monthStart])
}

model VoiceSession {
  id                  String   @id @default(uuid())
  userId              String
  guildId             String
  username            String
  channelId           String
  isAfk               Boolean  @default(false)
  isMutedOrDeafened   Boolean  @default(false)
  joinTime            DateTime @db.Timestamptz
  lastStatusChange    DateTime @db.Timestamptz
  isActive            Boolean  @default(true)

  @@index([isActive])
  @@index([userId, isActive])
  @@map("voice_sessions")
}

model GuildSettings {
  id                     Int       @id @default(autoincrement())
  guildId               String    @unique
  guildName             String?
  commandPrefix         String?
  albionGuildId         String?
  competitorIds         String[]  @default([])
  tankRoleId            String?
  supportRoleId         String?
  healerRoleId          String?
  dpsMeleeRoleId        String?
  dpsRangedRoleId       String?
  battlemountRoleId     String?
  nicknameVerifiedId    String?
  afkChannelId          String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  dailyActivities       DailyActivity[]
  weeklyActivities      WeeklyActivity[]
  monthlyActivities     MonthlyActivity[]
  playerRegistrations   PlayerRegistration[]

  @@index([albionGuildId])
}

model PlayerRegistration {
  id          Int           @id @default(autoincrement())
  userId      String
  guildId     String
  playerName  String
  region      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  guild       GuildSettings @relation(fields: [guildId], references: [guildId])

  @@unique([userId, guildId])
  @@index([playerName])
  @@index([userId, guildId])
} 