generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model DailyActivity {
  id                       String   @id @default(uuid())
  userId                   String
  guildId                  String
  username                 String
  date                     DateTime @db.Date
  messageCount             Int      @default(0)
  voiceTimeSeconds         Int      @default(0)
  afkTimeSeconds           Int      @default(0)
  mutedDeafenedTimeSeconds Int      @default(0)
  lastUpdated              DateTime @default(now()) @db.Timestamptz(6)

  @@unique([userId, guildId, date])
  @@index([date])
  @@index([guildId, date])
  @@map("daily_activity")
}

model VoiceSession {
  id                String   @id @default(uuid())
  userId            String
  guildId           String
  username          String
  channelId         String
  isAfk             Boolean  @default(false)
  isMutedOrDeafened Boolean  @default(false)
  joinTime          DateTime @db.Timestamptz(6)
  lastStatusChange  DateTime @db.Timestamptz(6)
  isActive          Boolean  @default(true)

  @@index([isActive])
  @@index([userId, isActive])
  @@map("voice_sessions")
}

model GuildSettings {
  id                 String   @id @default(uuid())
  guildId            String   @unique
  guildName          String
  afkChannelId       String?
  commandPrefix      String   @default("!albiongw")
  albionGuildId      String?
  competitorIds      String[] @default([])
  tankRoleId         String?
  supportRoleId      String?
  healerRoleId       String?
  dpsMeleeRoleId     String?
  dpsRangedRoleId    String?
  battlemountRoleId  String?
  nicknameVerifiedId String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  syncAlbionNickname Boolean  @default(false)
  battlelogWebhook   String?

  @@map("guild_settings")
}

model PlayerRegistration {
  id            String   @id @default(uuid())
  userId        String
  guildId       String
  albionGuildId String?
  region        String
  playerName    String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([guildId])
  @@index([userId])
  @@map("player_registrations")
}

model BattleRegistration {
  id          String   @id @default(uuid())
  userId      String
  guildId     String
  battleTime  DateTime @db.Timestamptz(6)
  enemyGuilds String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deaths      Int
  isVictory   Boolean
  kills       Int
  battleUrl   String?

  @@index([guildId])
  @@index([userId])
  @@map("battle_registrations")
}

model Composition {
  id          String   @id @default(uuid())
  guildId     String
  channelId   String
  messageId   String
  threadId    String
  roleId      String
  title       String
  description String
  data        Json     // Store the full composition JSON
  createdBy   String   // Discord user ID
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      String   @default("open") // open, closed, cancelled

  @@index([guildId])
  @@index([status])
  @@map("compositions")
}
